diff --git a/src/App.css b/src/App.css
index 6ddb427..095d02a 100644
--- a/src/App.css
+++ b/src/App.css
@@ -11,10 +11,11 @@ html, body {
   height: 100%;
   background-color: #e6f1f8;
   color: #d1d5db;
+  margin: 0px;
+  overflow-y: hidden;
  
 }
 
-
 .app {
   display: flex;
   flex-direction: column;
@@ -28,15 +29,6 @@ html, body {
   margin: 10px 0;
 }
 
-.row-container{
-  flex-wrap: nowrap;
-  flex-direction: row;
-  align-items: center;
-  justify-content: center;
-  display: flex;
-  flex: 1;
 
-  
-}
 
 
diff --git a/src/App.jsx b/src/App.jsx
index f8c1c4a..a72dc59 100644
--- a/src/App.jsx
+++ b/src/App.jsx
@@ -1,73 +1,33 @@
-import React, { useState, useEffect } from 'react';
-import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
-import Sidebar from './components/Sidebar';
-import TopBar from './components/Topbar';
-import ChatArea from './components/ChatArea';
-import History from './components/SidebarItem/History';
-import Login from './components/login';
-import Register from './components/register';
-import StudentDashboard from './components/StudentDashboard'; 
-import TeacherDashboard from './components/TeacherDashboard'; 
-import MultipleChoiceLayout from './components/test'; 
-import ProtectedPage from './components/ProtectedPage';
-import Dashboard from './components/Dashboard';
-import QuizPage from './components/quiz';
-import './App.css';
+import React, { useState, useEffect } from "react";
+import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
+import Login from "./components/login";
+import Register from "./components/register";
+import StudentDashboard from "./components/StudentDashboard"; 
+import TeacherDashboard from "./components/TeacherDashboard"; 
+import MultipleChoiceLayout from "./components/test"; 
+import ProtectedPage from "./components/ProtectedPage";
+import Dashboard from "./components/Dashboard";
+import QuizPage from "./components/quiz";
+import "./App.css";
 
 const App = () => {
-  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
-  const [currentChat, setCurrentChat] = useState('Chat 1');
-  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
-  const [chatHistories, setChatHistories] = useState({
-    'Chat 1': [],
-    'Chat 2': [],
-    'Chat 3': [],
-  });
   const [user, setUser] = useState(null); // Track logged-in user
 
-  // Load user from localStorage if available
   useEffect(() => {
-    const storedUser = localStorage.getItem('user');
+    const storedUser = localStorage.getItem("user");
     if (storedUser) {
       setUser(JSON.parse(storedUser));
     }
   }, []);
 
-  // Save user to localStorage when user changes
   useEffect(() => {
     if (user) {
-      localStorage.setItem('user', JSON.stringify(user));
+      localStorage.setItem("user", JSON.stringify(user));
     } else {
-      localStorage.removeItem('user');
+      localStorage.removeItem("user");
     }
   }, [user]);
 
-  // Debugging - log user state and localStorage to check data
-  useEffect(() => {
-    console.log("User state updated:", user);
-    console.log("User data in localStorage:", localStorage.getItem('user'));
-  }, [user]);
-
-  const toggleSidebar = () => {
-    setIsSidebarOpen(!isSidebarOpen);
-  };
-
-  const handleChatSelect = (chatName) => {
-    setCurrentChat(chatName);
-    setIsSidebarOpen(false);
-  };
-
-  const handleSendMessage = (message) => {
-    setChatHistories((prevHistories) => ({
-      ...prevHistories,
-      [currentChat]: [...prevHistories[currentChat], message],
-    }));
-  };
-
-  const toggleHistory = () => {
-    setIsHistoryOpen(!isHistoryOpen);
-  };
-
   const handleLogout = () => {
     setUser(null);
   };
@@ -75,18 +35,12 @@ const App = () => {
   return (
     <Router>
       <Routes>
-        <Route
-          path="/login"
-          element={<Login onLogin={(user) => setUser(user)} />} // Pass `setUser` to handle login
-        />
-        <Route
-          path="/register"
-          element={<Register />} 
-        />
+        <Route path="/login" element={<Login onLogin={(user) => setUser(user)} />} />
+        <Route path="/register" element={<Register />} />
         <Route
           path="/student-dashboard"
           element={
-            user && user.role === 'Student' ? (
+            user && user.role === "Student" ? (
               <StudentDashboard />
             ) : (
               <Navigate to="/login" />
@@ -96,65 +50,27 @@ const App = () => {
         <Route
           path="/teacher-dashboard"
           element={
-            user && user.role === 'Teacher' ? (
+            user && user.role === "Teacher" ? (
               <TeacherDashboard />
             ) : (
               <Navigate to="/login" />
             )
           }
-        />
-          <Route
-          path="/multiple-choice"
-          element={
-            user ? (
-              <MultipleChoiceLayout />
-            ) : (
-              <Navigate to="/login" />
-            )
-          }
         />
         <Route
           path="/quiz"
-          element={
-            user ? (
-              <QuizPage />
-            ) : (
-              <Navigate to="/login" />
-            )
-          }
+          element={user ? <QuizPage /> : <Navigate to="/login" />}
+        />
+        <Route
+          path="/test/:testId"
+          element={user ? <MultipleChoiceLayout /> : <Navigate to="/login" />}
         />
         <Route path="/protected" element={<ProtectedPage />} />
-        <Route path="/dashboard" element={<Dashboard />} />
         <Route
           path="/"
           element={
             user ? (
-              <div className="app">
-                <TopBar
-                  toggleSidebar={toggleSidebar}
-                  toggleHistory={toggleHistory}
-                  onLogout={handleLogout}
-                />
-                
-                <div className='row-container'>
-                  <Sidebar
-                    isOpen={isSidebarOpen}
-                    toggleSidebar={toggleSidebar}
-                  />
-                  <History
-                    isOpen={isHistoryOpen}
-                    onChatSelect={handleChatSelect}
-                  />
-                  <ChatArea
-                    isOpen={isHistoryOpen}
-                    currentChat={currentChat}
-                    messages={chatHistories[currentChat]}
-                    onSendMessage={handleSendMessage}
-                />
-                
-                </div>
-                
-              </div>
+              <Dashboard user={user} onLogout={handleLogout} />
             ) : (
               <Navigate to="/login" />
             )
diff --git a/src/components/ChatArea.css b/src/components/ChatArea.css
index bc6ac18..49cfbf1 100644
--- a/src/components/ChatArea.css
+++ b/src/components/ChatArea.css
@@ -1,5 +1,3 @@
-
-
 .chat-area {
   display: flex;
   flex-direction: column;
@@ -7,7 +5,6 @@
   background-color: #e6f1f8;
   border-radius: 20px;
   overflow-y: auto;
-  
   padding-bottom: 20px;
   padding-left: 20px;
   padding-right: 20px;
@@ -15,27 +12,28 @@
   width: 900px;
   height: 88vh;
   margin: 0 auto;
-  transition:  0.3s ease-in-out;
+  transition: 0.3s ease-in-out;
 }
-.chat-area.with-history {
-  transition:  0.3s ease-in-out;
+
+.chat-area-with-history {
+  transition: 0.3s ease-in-out;
 }
 
-.messages {
+.chat-area-messages {
   display: flex;
   flex-direction: column;
   gap: 0px;
   max-height: 100%;
   overflow-y: auto;
-  padding-right: 15px; 
+  padding-right: 15px;
 }
 
-.messages::-webkit-scrollbar {
+.chat-area-messages::-webkit-scrollbar {
   width: 0;
   height: 0;
 }
 
-.message {
+.chat-area-message {
   max-width: 75%;
   margin-bottom: 10px;
   line-height: 1;
@@ -43,22 +41,21 @@
   padding: 12px 18px;
   border-radius: 20px;
   font-size: 14px;
-  
 }
 
-.message.bot {
+.chat-area-message-bot {
   background-color: #ffffff;
   align-self: flex-start;
   color: black;
 }
 
-.message.user {
+.chat-area-message-user {
   background-color: #ffffff;
   align-self: flex-end;
   color: black;
 }
 
-.input-area {
+.chat-area-input-area {
   display: flex;
   justify-content: center;
   align-items: center;
@@ -71,7 +68,7 @@
   z-index: 10;
 }
 
-input {
+.chat-area-input {
   flex: 1;
   padding: 12px;
   border: none;
@@ -82,15 +79,15 @@ input {
   margin-right: 10px;
 }
 
-input::placeholder {
+.chat-area-input::placeholder {
   color: #a1a1a1;
 }
 
-input:focus {
+.chat-area-input:focus {
   outline: none;
 }
 
-.send_button {
+.chat-area-send-button {
   background-color: #0a84ff;
   color: white;
   padding: 10px 20px;
@@ -101,12 +98,18 @@ input:focus {
   transition: background-color 0.3s ease;
 }
 
-.send_button:hover {
+.chat-area-send-button:hover {
   background-color: #0062d1;
 }
 
-.current_chat{
+.chat-area-current-chat {
   color: #0a84ff;
   margin-bottom: 0px;
   margin-top: 20px;
-}
\ No newline at end of file
+}
+
+.chat-area-divider {
+  margin: 0 auto;
+  border-top: 1px solid #d1d1d1;
+  width: 100%;
+}
diff --git a/src/components/ChatArea.jsx b/src/components/ChatArea.jsx
index 7a3ef08..fd10db3 100644
--- a/src/components/ChatArea.jsx
+++ b/src/components/ChatArea.jsx
@@ -2,50 +2,49 @@ import React, { useState, useEffect, useRef } from 'react';
 import './ChatArea.css';
 import { Divider } from '@mui/material';
 
-const ChatArea = ({ currentChat, messages, onSendMessage, isOpen}) => {
+const ChatArea = ({ currentChat, messages, onSendMessage, isOpen }) => {
   const [input, setInput] = useState('');
   const messagesEndRef = useRef(null);
 
-
   useEffect(() => {
     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
   }, [messages]);
 
   const handleSend = () => {
     if (input.trim()) {
+      // User question
       onSendMessage({ text: input, sender: 'user' });
       setInput('');
 
-      // Example bot response for demonstration purposes
       setTimeout(() => {
+        // Chatbot reply
         onSendMessage({ text: 'Hello, this is a USTH Chatbot reply', sender: 'bot' });
       }, 500);
-
     }
-  }
-  ;
+  };
 
   return (
-    <div className={`chat-area ${isOpen ? 'with-history' : ''}`}>
-      <h2 className='current_chat'>{currentChat}</h2>
-      <div className='divider'></div>
-      <div className="messages">
+    <div className={`chat-area ${isOpen ? 'chat-area-with-history' : ''}`}>
+      <h2 className="chat-area-current-chat">{currentChat}</h2>
+      <div className="chat-area-divider"></div>
+      <div className="chat-area-messages">
         {messages.map((msg, index) => (
-          <div key={index} className={`message ${msg.sender}`}>
+          <div key={index} className={`chat-area-message chat-area-message-${msg.sender}`}>
             {msg.text}
           </div>
         ))}
         <div ref={messagesEndRef} />
       </div>
-      <div className="input-area">
+      <div className="chat-area-input-area">
         <input
           type="text"
+          className="chat-area-input"
           placeholder="Type your message"
           value={input}
           onChange={(e) => setInput(e.target.value)}
           onKeyDown={(e) => e.key === 'Enter' && handleSend()}
         />
-        <button className='send_button  ' onClick={handleSend}>Send</button>
+        <button className="chat-area-send-button" onClick={handleSend}>Send</button>
       </div>
     </div>
   );
diff --git a/src/components/Sidebar.jsx b/src/components/Sidebar.jsx
index e254553..bdda0e8 100644
--- a/src/components/Sidebar.jsx
+++ b/src/components/Sidebar.jsx
@@ -17,18 +17,20 @@ import quizIcon from '../assets/quiz.png';
 import settingIcon from '../assets/settings.png';
 import usthLogo from '../assets/usthlogo.png';
 import Setting from './SidebarItem/Setting';
+import { useNavigate } from 'react-router-dom';
 
 export default function Sidebar({ isOpen, toggleSidebar }) {
   const [showSettings, setShowSettings] = useState(false);
 
   const mainMenuItems = [
     { text: 'Add Chat', icon: addChatIcon },
-    { text: 'Award', icon: awardIcon },
+    { text: 'Theories', icon: addChatIcon},
+    { text: 'Rankings', icon: awardIcon },
     { text: 'Quiz', icon: quizIcon },
     { text: 'Setting', icon: settingIcon }
   ];
 
-
+  const navigate = useNavigate();
 
   const handleMainMenuClick = (menuItem) => {
     switch (menuItem) {
@@ -36,13 +38,16 @@ export default function Sidebar({ isOpen, toggleSidebar }) {
         toggleSidebar();
         console.log('Navigating to Add Chat');
         break;
-      case 'Award':
+      case 'Theories':
+        toggleSidebar();
+        break;
+      case 'Rankings':
         toggleSidebar();
         console.log('Navigating to Awards');
         break;
       case 'Quiz':
         toggleSidebar();
-        console.log('Navigating to Quiz');
+        navigate('/quiz')
         break;
       case 'Setting':
         toggleSidebar();
@@ -89,20 +94,6 @@ export default function Sidebar({ isOpen, toggleSidebar }) {
 
           <Divider className="divider" />
 
-          {/* Conversation History with Transition
-          <div className={`conv-history ${showConvHistory ? 'show' : 'hide'}`}>
-            <List>
-              {conversationChats.map((chat) => (
-                <ListItem key={chat} disablePadding>
-                  <ListItemButton onClick={() => handleChatSelect(chat)}>
-                    <ListItemText primary={chat} />
-                  </ListItemButton>
-                </ListItem>
-              ))}
-            </List>
-            <Divider className="divider" />
-          </div> */}
-
           {/*Logout Section */}
           <div className="logout-section">
             <ListItem disablePadding>
diff --git a/src/components/SidebarItem/History.css b/src/components/SidebarItem/History.css
index c6c9662..edf1265 100644
--- a/src/components/SidebarItem/History.css
+++ b/src/components/SidebarItem/History.css
@@ -17,7 +17,7 @@
   
   .history.open {
     left: 0; 
-    flex: 0.4;
+    flex: 0.5;
     height: 100vh;
     overflow-y:hidden;
     
diff --git a/src/components/SidebarItem/History.jsx b/src/components/SidebarItem/History.jsx
index 0cb7925..a80555a 100644
--- a/src/components/SidebarItem/History.jsx
+++ b/src/components/SidebarItem/History.jsx
@@ -1,5 +1,4 @@
 import React from "react";
-import sidebarLeftIcon from "../../assets/sidebar-left.png";
 import "./History.css";
 
 const History = ({ isOpen, onChatSelect }) => {
diff --git a/src/components/SidebarItem/Setting.css b/src/components/SidebarItem/Setting.css
index ddafff3..af64fd9 100644
--- a/src/components/SidebarItem/Setting.css
+++ b/src/components/SidebarItem/Setting.css
@@ -1,4 +1,4 @@
-/* Dark overlay for background */
+
 .overlay {
     position: fixed;
     top: 0;
@@ -14,7 +14,7 @@
   }
   
   .settings-container {
-    width: 700px;
+    width: 500px;
 
     padding: 20px;
     background-color: #ffffff;
diff --git a/src/components/StudentDashboard.jsx b/src/components/StudentDashboard.jsx
index bddd88e..ef5501a 100644
--- a/src/components/StudentDashboard.jsx
+++ b/src/components/StudentDashboard.jsx
@@ -1,18 +1,48 @@
-import React from 'react';
-import { Link } from 'react-router-dom';
+import React, { useState } from 'react';
+import TopBar from './Topbar';
+import Sidebar from './Sidebar';
+import History from './SidebarItem/History';
+import ChatArea from './ChatArea';
+import './StudentDashboard.css'; // Create a separate CSS for dashboard styles
+
+const Dashboard = ({ user, onLogout }) => {
+  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
+  const [currentChat, setCurrentChat] = useState('Chat 1');
+  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
+  const [chatHistories, setChatHistories] = useState({
+    'Chat 1': [],
+    'Chat 2': [],
+    'Chat 3': [],
+  });
+
+  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);
+  const handleChatSelect = (chatName) => {
+    setCurrentChat(chatName);
+    setIsSidebarOpen(false);
+  };
+  const handleSendMessage = (message) => {
+    setChatHistories((prev) => ({
+      ...prev,
+      [currentChat]: [...prev[currentChat], message],
+    }));
+  };
+  const toggleHistory = () => setIsHistoryOpen(!isHistoryOpen);
 
-const StudentDashboard = () => {
   return (
-    <div>
-      <h1>Student Dashboard</h1>
-      <Link to="/multiple-choice">
-        <button>Take Test</button>
-      </Link>
-      <Link to="/quiz">
-        <button>Start Quiz</button>
-      </Link>
+    <div className="student-dashboard">
+      <TopBar toggleSidebar={toggleSidebar} toggleHistory={toggleHistory} onLogout={onLogout} />
+      <div className="row-container">
+        <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />
+        <History isOpen={isHistoryOpen} onChatSelect={handleChatSelect} />
+        <ChatArea
+          isOpen={isHistoryOpen}
+          currentChat={currentChat}
+          messages={chatHistories[currentChat]}
+          onSendMessage={handleSendMessage}
+        />
+      </div>
     </div>
   );
 };
 
-export default StudentDashboard;
+export default Dashboard;
diff --git a/src/components/login.css b/src/components/login.css
index 54be9a7..0e28c23 100644
--- a/src/components/login.css
+++ b/src/components/login.css
@@ -10,6 +10,7 @@
   color: #fff;
   box-sizing: border-box;
   width: 100%;
+  height: 100vh;
 }
 
 h2 {
diff --git a/src/components/login.jsx b/src/components/login.jsx
index 0f094ca..8b3a983 100644
--- a/src/components/login.jsx
+++ b/src/components/login.jsx
@@ -19,6 +19,8 @@ const Login = ({ onLogin }) => {
     setError(''); // Clear any previous error message
     setLoading(true);
 
+  
+
     try {
       // Call the login API
       const response = await axios.post(
diff --git a/src/components/quiz.css b/src/components/quiz.css
index 5084609..8d51024 100644
--- a/src/components/quiz.css
+++ b/src/components/quiz.css
@@ -1,175 +1,153 @@
-body {
-    margin: 0;
-    font-family: Arial, sans-serif;
-    margin: 100px;
-    background-color:#E6F1F8 ;
-  }
-  
-  .container {
-    width: 100%;
-    height: 100%;
-    display: flex;
-    flex-wrap: wrap;
-    justify-content: center;
-    gap: 20px;
-  }
-  
-  .card {
-    width: 255px;
-    height: 255px;
-    position: relative;
-    background: #fff;
-    cursor: pointer;
-    overflow: hidden;
-    border-radius: 30px;
-  }
-  .card:hover {
-    transform: scale(1.05); /* Adds a hover effect */
-    transition: transform 0.2s ease-in-out;
-  }
-  
-  .card:active {
-    transform: scale(0.95); /* Slight shrink on click */
-  }
-  
-  .box {
-    width: 256px;
-    height: 256px;
-    position: absolute;
-    background: white;
-    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
-    border-radius: 30px;
-  }
-  
-  .number {
-    position: absolute;
-    left: 100px;
-    top: 57px;
-    font-size: 100px;
-    font-family: 'PT Serif', serif;
-    font-weight: 400;
-  }
-  
-  .red-text {
-    color: #FF0000;
-  }
-  
-  .green-text {
-    color: #00A305;
-  }
-  
-  .bottom-right {
-    position: absolute;
-    left: 148px;
-    top: 207px;
-  }
-  
-  .bottom-left {
-    position: absolute;
-    left: 26px;
-    top: 207px;
-    display: flex;
-    align-items: center;
-  }
-  
-  .label {
-    display: flex;
-    align-items: center;
-    gap: 5px;
-    font-size: 25px;
-    font-family: 'Protest Strike', sans-serif;
-  }
-  
-  .orange-text {
-    color: #FF4000;
-  }
-  
-  .pagination {
-    display: flex;
-    justify-content: center;
-    position: absolute; /* Positioning relative to the parent container */
-    bottom: 20px; /* Distance from the bottom of the parent/container */
-    left: 50%; /* Center horizontally */
-    transform: translateX(-50%);
-  }
-  
-  .pagination a {
-    color: black;
-    position: left;
-    padding: 8px 16px;
-    text-decoration: none;
-  
-  }
-  
-  .pagination a.active {
-    background-color: #0015ff;
-    color: white;
-    border-radius: 5px;
-  }
-  
-  .pagination a:hover:not(.active) {
-    background-color: #ddd;
-    border-radius: 5px;
-  }
-  
-  /* Responsive Design */
-  @media (max-width: 1200px) {
-    .card, .box {
-      width: 220px;
-      height: 220px;
-    }
-    .number {
-      font-size: 80px;
-      left: 70px;
-      top: 50px;
-    }
-    .bottom-right {
-      left: 120px;
-      top: 180px;
-    }
-    .bottom-left {
-      left: 20px;
-      top: 180px;
-    }
-  }
-  
-  @media (max-width: 768px) {
-    .card, .box {
-      width: 180px;
-      height: 180px;
-    }
-    .number {
-      font-size: 60px;
-      left: 60px;
-      top: 40px;
-    }
-    .bottom-right {
-      left: 100px;
-      top: 150px;
-    }
-    .bottom-left {
-      left: 15px;
-      top: 150px;
-    }
-  }
-  
-  @media (max-width: 480px) {
-    .card, .box {
-      width: 150px;
-      height: 150px;
-    }
-    .number {
-      font-size: 50px;
-      left: 45px;
-      top: 35px;
-    }
-    .bottom-right {
-      left: 80px;
-      top: 120px;
-    }
-    .bottom-left {
-      left: 10px;
-      top: 120px;
-    }
-  }
-  
\ No newline at end of file
+
+.quiz-container {
+  width: 100%;
+  height: 100%;
+  display: flex;
+  flex-wrap: wrap;
+  justify-content: center;
+  gap: 20px;
+  margin-top: 100px;
+  padding: 0 100px;
+}
+
+.quiz-card {
+  width: 255px;
+  height: 255px;
+  position: relative;
+  background: #f8f9fa;
+  border: 1px solid #ddd;
+  cursor: pointer;
+  overflow: hidden;
+  border-radius: 15px;
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+  align-items: center;
+  transition: transform 0.3s ease, box-shadow 0.3s ease;
+  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
+}
+
+.quiz-card:hover {
+  transform: translateY(-10px); /* Lift effect */
+  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
+}
+
+.quiz-card:active {
+  transform: scale(0.95); /* Slight shrink on click */
+}
+
+.quiz-number {
+  font-size: 90px;
+  font-family: 'PT Serif', serif;
+  font-weight: bold;
+  margin-bottom: 20px;
+}
+
+.quiz-number.red {
+  color: #d9534f;
+}
+
+.quiz-number.green {
+  color: #5cb85c;
+}
+
+.quiz-label-container {
+  display: flex;
+  justify-content: space-between;
+  width: 100%;
+  padding: 10px 15px;
+}
+
+.quiz-label {
+  display: flex;
+  align-items: center;
+  gap: 8px;
+  font-size: 20px;
+  font-family: 'Arial', sans-serif;
+  font-weight: 500;
+}
+
+.quiz-label img {
+  width: 24px;
+  height: 24px;
+}
+
+.quiz-label.orange {
+  color: #f0ad4e;
+}
+
+.quiz-label.green {
+  color: #5cb85c;
+}
+
+.quiz-pagination {
+  display: flex;
+  justify-content: center;
+  margin-top: 20px;
+}
+
+.quiz-pagination a {
+  color: #007bff;
+  padding: 8px 16px;
+  text-decoration: none;
+  font-size: 16px;
+  margin: 0 5px;
+  border-radius: 5px;
+  border: 1px solid #007bff;
+  transition: all 0.2s ease-in-out;
+}
+
+.quiz-pagination a.active {
+  background-color: #007bff;
+  color: white;
+}
+
+.quiz-pagination a:hover:not(.active) {
+  background-color: #e9ecef;
+}
+
+.quiz-pagination a:active {
+  transform: scale(0.95);
+}
+
+/* Responsive Design */
+@media (max-width: 1200px) {
+  .quiz-card {
+    width: 220px;
+    height: 220px;
+  }
+
+  .quiz-number {
+    font-size: 80px;
+  }
+}
+
+@media (max-width: 768px) {
+  .quiz-card {
+    width: 180px;
+    height: 180px;
+  }
+
+  .quiz-number {
+    font-size: 60px;
+  }
+
+  .quiz-label {
+    font-size: 18px;
+  }
+}
+
+@media (max-width: 480px) {
+  .quiz-card {
+    width: 150px;
+    height: 150px;
+  }
+
+  .quiz-number {
+    font-size: 50px;
+  }
+
+  .quiz-label {
+    font-size: 16px;
+  }
+}
diff --git a/src/components/quiz.jsx b/src/components/quiz.jsx
index a54b70e..d3bcf11 100644
--- a/src/components/quiz.jsx
+++ b/src/components/quiz.jsx
@@ -1,20 +1,24 @@
 import React, { useState, useEffect } from "react";
-import './quiz.css';
+import { useNavigate } from "react-router-dom";
+import "./quiz.css";
+import CorrectIcon from "../assets/correct.png"
+import WrongIcon from "../assets/wrong.png"
+import TopBar from "./Topbar";
 
-const QuizPage = () => {
-  // State để lưu trữ danh sách câu hỏi
+const QuizPage = ({ toggleSidebar, toggleHistory, onLogout }) => {
+  // State to store the list of questions
+  const navigate = useNavigate();
   const [questions, setQuestions] = useState([]);
-  const [currentPage, setCurrentPage] = useState(1); // Trang hiện tại
-  const questionsPerPage = 8; // Số lượng câu hỏi mỗi trang
+  const [currentPage, setCurrentPage] = useState(1); // Current page
+  const questionsPerPage = 8; 
 
-  // Hàm giả lập lấy dữ liệu từ API
+  // Simulated API call to fetch questions
   useEffect(() => {
-    // Dữ liệu mẫu
     const fetchQuestions = async () => {
       const mockData = Array.from({ length: 50 }, (_, i) => ({
         id: i + 1,
-        correctRate: Math.random() * 100, // Tỉ lệ đúng ngẫu nhiên
-        errorRate: Math.random() * 100, // Tỉ lệ sai ngẫu nhiên
+        correctRate: Math.random() * 100, // Random correct rate
+        errorRate: Math.random() * 100, // Random error rate
       }));
       setQuestions(mockData);
     };
@@ -22,39 +26,56 @@ const QuizPage = () => {
     fetchQuestions();
   }, []);
 
-  // Lấy câu hỏi cho trang hiện tại
+  // Get questions for the current page
   const displayedQuestions = questions.slice(
     (currentPage - 1) * questionsPerPage,
     currentPage * questionsPerPage
   );
 
-  // Xử lý chuyển trang
+  // Handle page change
   const handlePageChange = (pageNumber) => {
     setCurrentPage(pageNumber);
   };
 
+  const goToTest = (testId) => {
+    navigate(`/test/${testId}`);
+  };
+
   return (
     <>
-      <div className="container">
+      <TopBar
+        toggleSidebar={toggleSidebar}
+        toggleHistory={toggleHistory}
+        onLogout={onLogout}
+      />
+      <div className="quiz-container">
         {displayedQuestions.map((question) => (
-          <button key={question.id} className="card">
-            <div className="number red-text">{question.id}</div>
-            <div className="bottom-right">
-              <div className="label orange-text">
-                <span>{question.errorRate.toFixed(0)}%</span>
-                <img src="img/error.png" alt="error-icon" />
-              </div>
+          <button
+          key={question.id}
+          className="quiz-card"
+          onClick={() => goToTest(question.id)}
+        >
+            <div
+              className={`quiz-number ${
+                question.correctRate > question.errorRate ? "green" : "red"
+              }`}
+            >
+              {question.id}
             </div>
-            <div className="bottom-left">
-              <div className="label green-text">
-                <img src="img/correct.png" alt="correct-icon" />
+            <div className="quiz-label-container">
+              <div className="quiz-label green">
+                <img src={CorrectIcon} alt="Correct icon" />
                 <span>{question.correctRate.toFixed(0)}%</span>
               </div>
+              <div className="quiz-label orange">
+                <span>{question.errorRate.toFixed(0)}%</span>
+                <img src= {WrongIcon} alt="Error icon" />
+              </div>
             </div>
           </button>
         ))}
       </div>
-      <div className="pagination">
+      <div className="quiz-pagination">
         <a
           href="#"
           onClick={() => handlePageChange(Math.max(currentPage - 1, 1))}
diff --git a/src/components/register.css b/src/components/register.css
index 97015b5..594468b 100644
--- a/src/components/register.css
+++ b/src/components/register.css
@@ -1,80 +1,100 @@
+/* Container styling */
 .register-container {
-    display: flex;
-    flex-direction: column;
-    align-items: center;
-    justify-content: center;
-    min-height: 50vh;
-    padding: 2rem;
-    background: linear-gradient(360deg, #6a11cb, #2575fc);
-    font-family: Arial, sans-serif;
-    color: #fff;
-    box-sizing: border-box;
-    width: 100%;
-  }
-  
-  h2 {
-    font-size: 2rem;
-    margin-bottom: 1rem;
-  }
-  
-  .register-form {
-    background-color: #ffffff;
-    padding: 2rem;
-    border-radius: 8px;
-    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
-    color: #333;
-    width: 90%;
-    max-width: 400px;
-  }
-  
-  .register-form .input-group {
-    margin-bottom: 1rem;
-  }
-  
-  label {
-    display: block;
-    font-size: 1rem;
-    margin-bottom: 0.5rem;
-    color: #333;
-  }
-  
-  input, select {
-    width: 100%;
-    padding: 0.75rem;
-    border: 1px solid #ccc;
-    border-radius: 4px;
-    font-size: 1rem;
-    outline: none;
-    transition: border 0.3s ease;
-  }
-  
-  input:focus, select:focus {
-    border-color: #6a11cb;
-  }
-  
-  .register-button {
-    width: 100%;
-    padding: 0.75rem;
-    border: none;
-    border-radius: 4px;
-    background: #6a11cb;
-    color: #fff;
-    font-size: 1rem;
-    cursor: pointer;
-    transition: background 0.3s ease;
-  }
-  
-  .register-button:hover {
-    background: #2575fc;
-  }
-  
-  .register-button:active {
-    background: #1a5cdb;
-  }
-  
-  .error {
-    color: red;
-    font-size: 0.875rem;
-    margin-top: 1rem;
-  }
-  
\ No newline at end of file
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+  min-height: 50vh;
+  padding: 2rem;
+  background: linear-gradient(360deg, #6a11cb, #2575fc);
+  font-family: Arial, sans-serif;
+  color: #fff;
+  box-sizing: border-box;
+  width: 100%;
+}
+
+.register-container h2 {
+  font-size: 2rem;
+  margin-bottom: 1rem;
+}
+
+.register-container-form {
+  background-color: #ffffff;
+  padding: 2rem;
+  border-radius: 8px;
+  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
+  color: #333;
+  width: 90%;
+  max-width: 400px;
+}
+
+.register-container-form .form-group {
+  margin-bottom: 1rem;
+}
+
+.register-container-form label {
+  display: block;
+  font-size: 1rem;
+  margin-bottom: 0.5rem;
+  color: #333;
+}
+
+.register-container input[type="email"],
+.register-container input[type="text"],
+.register-container input[type="password"],
+.register-container select {
+  width: 100%;
+  padding: 0.75rem;
+  border: 1px solid #ccc;
+  border-radius: 4px;
+  font-size: 1rem;
+  outline: none;
+  transition: border 0.3s ease;
+}
+
+.register-container input[type="email"]:focus,
+.register-container input[type="text"]:focus,
+.register-container input[type="password"]:focus,
+.register-container select:focus {
+  border-color: #6a11cb;
+}
+
+/* Submit button styles scoped */
+.register-container input[type="submit"] {
+  width: 100%;
+  padding: 0.75rem;
+  border: none;
+  border-radius: 4px;
+  background: #6a11cb;
+  color: #fff;
+  font-size: 1rem;
+  cursor: pointer;
+  transition: background 0.3s ease;
+}
+
+.register-container input[type="submit"]:hover {
+  background: #2575fc;
+}
+
+.register-container input[type="submit"]:active {
+  background: #1a5cdb;
+}
+
+/* Error and success messages */
+.error-pop-up {
+  color: red;
+  font-size: 0.875rem;
+  margin-top: 1rem;
+  background: #ffe6e6;
+  padding: 1rem;
+  border-radius: 4px;
+}
+
+.success-pop-up {
+  color: green;
+  font-size: 0.875rem;
+  margin-top: 1rem;
+  background: #e6ffed;
+  padding: 1rem;
+  border-radius: 4px;
+}
diff --git a/src/components/register.jsx b/src/components/register.jsx
index 405f42a..ff88fd6 100644
--- a/src/components/register.jsx
+++ b/src/components/register.jsx
@@ -1,6 +1,6 @@
 import React, { useState } from 'react';
 import { Link, useNavigate } from 'react-router-dom';
-import './register.css';
+import './register.css'; // Scoped CSS
 import axios from 'axios';
 
 function Register() {
@@ -8,7 +8,7 @@ function Register() {
     const [username, setUsername] = useState("");
     const [password, setPassword] = useState("");
     const [re_password, setRePassword] = useState("");
-    const [role, setRole] = useState("Student"); 
+    const [role, setRole] = useState("Student"); // Default to "Student"
     const [error, setError] = useState("");
     const [success, setSuccess] = useState(false);
     const [loading, setLoading] = useState(false);
@@ -18,7 +18,7 @@ function Register() {
     const handleRegister = async (e) => {
         e.preventDefault();
 
-        // Validation
+        // Basic Validation
         if (password !== re_password) {
             setError("Passwords do not match");
             return;
@@ -29,8 +29,7 @@ function Register() {
             return;
         }
 
-        // Set loading state before sending request
-        setLoading(true);
+        setLoading(true); // Set loading state
         setError(""); // Clear previous errors
 
         try {
@@ -40,7 +39,7 @@ function Register() {
                     email: email,
                     user_name: username,
                     password: password,
-                    role: role, 
+                    role: role,
                 },
                 {
                     headers: {
@@ -49,83 +48,90 @@ function Register() {
                 }
             );
 
-            console.log('Response:', response);
-
             if (response.status >= 200 && response.status < 300) {
-                setSuccess(true);
+                setSuccess(true); // Registration successful
                 setTimeout(() => {
                     setSuccess(false);
                     navigate("/login");
-                }, 3000);
+                }, 3000); // Redirect after 3 seconds
             } else {
                 setError(response.data.message || 'Something went wrong');
             }
         } catch (error) {
-            console.error("Registration failed:", error);
             setError(error.response?.data?.message || "Registration failed");
         } finally {
-            setLoading(false); // Stop loading state after request
+            setLoading(false); // Reset loading state
         }
     };
 
     return (
-        <div className='register-page'>
-            <div className='register-container'>
+        <div className="register-page">
+            <div className="register-container">
+                {/* Logo Section */}
                 <div className="header">
                     <img
                         src="/src/assets/logo.png"
                         alt="Logo-Truong-Dai-hoc-Khoa-hoc-va-Cong-nghe-Ha-Noi"
                     />
                 </div>
+
+                {/* Form Section */}
                 <div className="register-container-form">
                     <h2>Register</h2>
                     <form onSubmit={handleRegister}>
+                        {/* Email Input */}
                         <div className="form-group">
                             <input
                                 type="email"
                                 id="email"
                                 name="email"
-                                required=""
-                                placeholder='Email'
+                                placeholder="Email"
                                 value={email}
                                 onChange={(e) => setEmail(e.target.value)}
+                                required
                             />
                         </div>
+
+                        {/* Username Input */}
                         <div className="form-group">
                             <input
                                 type="text"
                                 id="username"
                                 name="username"
-                                required=""
-                                placeholder='Username'
+                                placeholder="Username"
                                 value={username}
                                 onChange={(e) => setUsername(e.target.value)}
+                                required
                             />
                         </div>
+
+                        {/* Password Input */}
                         <div className="form-group">
                             <input
                                 type="password"
                                 id="password"
                                 name="password"
-                                required=""
-                                placeholder='Password'
+                                placeholder="Password"
                                 value={password}
                                 onChange={(e) => setPassword(e.target.value)}
+                                required
                             />
                         </div>
+
+                        {/* Re-enter Password */}
                         <div className="form-group">
                             <input
                                 type="password"
                                 id="re-password"
                                 name="re-password"
-                                required=""
-                                placeholder='Re-enter your password'
+                                placeholder="Re-enter your password"
                                 value={re_password}
                                 onChange={(e) => setRePassword(e.target.value)}
+                                required
                             />
                         </div>
 
-                        {/* Role selection */}
+                        {/* Role Selection */}
                         <div className="form-group">
                             <select
                                 id="role"
@@ -139,18 +145,25 @@ function Register() {
                             </select>
                         </div>
 
-                        <input type="submit" value={loading ? "Registering..." : "Register"} disabled={loading} />
-                        <div className="register">
-                            Already have an account? <Link to="/login">Sign in</Link>
-                        </div>
+                        {/* Submit Button */}
+                        <input
+                            type="submit"
+                            value={loading ? "Registering..." : "Register"}
+                            disabled={loading}
+                        />
                     </form>
+
+                    {/* Link to Login */}
+                    <div className="register">
+                        Already have an account? <Link to="/login">Sign in</Link>
+                    </div>
                 </div>
             </div>
 
-            {/* Display error message */}
+            {/* Error Pop-Up */}
             {error && <div className="error-pop-up">{error}</div>}
 
-            {/* Display success message */}
+            {/* Success Pop-Up */}
             {success && (
                 <div className="success-pop-up">
                     <p>You have successfully registered!</p>
@@ -158,6 +171,6 @@ function Register() {
             )}
         </div>
     );
-};
+}
 
 export default Register;
diff --git a/src/components/test.css b/src/components/test.css
index b2b72df..c179a93 100644
--- a/src/components/test.css
+++ b/src/components/test.css
@@ -1,161 +1,138 @@
-body {
-    font-family: Arial, sans-serif;
-    background-color: #E6F1F8;
-    margin: 0;
-    padding: 0;
-    height: 100vh;
-    display: flex;
-    justify-content: center;
-    align-items: center;
-}
-
-.container {
-    display: flex;
-    flex-wrap: wrap;
-    justify-content: space-between;
-    width: 90%;
-    max-width: 1200px;
-    height: 90vh;
-    box-sizing: border-box;
-    gap: 20px;
-}
-
-/* Khu vực chọn bài kiểm tra */
-.test-selection {
-    background-color: #ffffff;
-    padding: 20px;
-    border-radius: 8px;
-    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
-    width: 30%;
-    height: 100%;
-    overflow-y: auto;
-    display: flex;
-    flex-direction: column;
-    align-items: center;
-}
-
-.test-selection h3 {
-    margin-bottom: 20px;
-    font-size: 1.4em;
-    color: #333;
-    text-align: center;
-}
-
-.test-selection button {
-    width: 50px;
-    height: 50px;
-    margin: 5px;
-    border: 1px solid #ccc;
-    border-radius: 5px;
-    background-color: #ffffff;
-    cursor: pointer;
-    color: #333;
-    font-size: 1em;
-    text-align: center;
-}
-
-.test-selection button.active {
-    background-color: #00796b;
-    color: #fff;
-    border: 1px solid #004d40;
-}
-
-.test-selection button:hover {
-    background-color: #f0f0f0;
-}
-
-.finish {
-    margin-top: 20px;
-    width: 100%;
-}
-
-.finish button {
-    width: 100%;
-    padding: 12px;
-    border: none;
-    border-radius: 5px;
-    background-color: #ff5722;
-    color: white;
-    font-size: 1em;
-    cursor: pointer;
-    text-align: center;
-}
-
-.finish button:hover {
-    background-color: #e64a19;
-}
-
-/* Khu vực câu hỏi */
+
+.test-container {
+  display: flex;
+  justify-content: space-between;
+  gap: 20px;
+  padding: 20px;
+ 
+  max-width: 1100px;
+  margin: 0 auto;
+  font-family: Arial, sans-serif;
+}
+
+/* Sidebar for question navigation */
+.test-sidebar {
+  width: 30%;
+  background: #f9f9f9;
+  border: 1px solid #ddd;
+  border-radius: 8px;
+  padding: 15px;
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+}
+
+.test-sidebar h4 {
+  margin-bottom: 10px;
+  font-size: 16px;
+  color: #333;
+  text-align: center;
+}
+
+.navigation-buttons {
+  display: flex;
+  flex-wrap: wrap;
+  gap: 10px;
+  margin-bottom: 15px;
+}
+
+.navigation-buttons button {
+  width: 40px;
+  height: 40px;
+  font-size: 14px;
+  border: 1px solid #007bff;
+  background: #fff;
+  color: #007bff;
+  border-radius: 4px;
+  cursor: pointer;
+}
+
+.navigation-buttons button.active,
+.navigation-buttons button:hover {
+  background: #007bff;
+  color: #fff;
+}
+
+.test-sidebar .finish {
+  width: 100%;
+  padding: 10px;
+  background: #28a745;
+  color: #fff;
+  font-size: 14px;
+  border: none;
+  border-radius: 4px;
+  cursor: pointer;
+}
+
+.test-sidebar .finish:hover {
+  background: #218838;
+}
+
+/* Main question section */
 .question-section {
-    background-color: #ffffff;
-    padding: 20px;
-    border-radius: 8px;
-    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
-    width: 65%;
-    height: 100%;
-    overflow-y: auto;
+  width: 65%;
+  background: #fff;
+  border: 1px solid #ddd;
+  border-radius: 8px;
+  padding: 20px;
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+  justify-content: space-between;
+}
+
+.question-section h4 {
+  font-size: 18px;
+  color: #444;
+  margin-bottom: 10px;
 }
 
 .question-section h2 {
-    margin-bottom: 20px;
-    font-size: 1.5em;
-    color: #333;
+  font-size: 16px;
+  color: #555;
+  margin-bottom: 15px;
 }
 
-.question-section label {
-    display: block;
-    margin-bottom: 15px;
-    font-size: 1.1em;
-    padding: 10px;
-    border: 1px solid #ddd;
-    border-radius: 5px;
-    background-color: #f9f9f9;
-    cursor: pointer;
+.options {
+  margin-bottom: 20px;
 }
 
-.question-section label:hover {
-    background-color: #f0f0f0;
+.option-label {
+  display: flex;
+  flex-direction: row-reverse;
+  align-content: center;
+  align-items: center;
+  justify-content: space-between;
+  margin-bottom: 10px;
+  font-size: 14px;
+  color: #333;
 }
 
-.question-section input[type="radio"] {
-    margin-right: 10px;
+.option-label input {
+  margin-right: 10px;
+  width: 13px;
+  height: 13px;
+
+
+ 
 }
 
 .button-container {
-    display: flex;
-    justify-content: space-between;
-    margin-top: 20px;
+  display: flex;
+  justify-content: space-between;
 }
 
 .button-container button {
-    padding: 12px 20px;
-    background-color: #00796b;
-    color: white;
-    border: none;
-    border-radius: 5px;
-    cursor: pointer;
-    font-size: 1em;
+  padding: 10px 20px;
+  font-size: 14px;
+  color: #fff;
+  background: #007bff;
+  border: none;
+  border-radius: 4px;
+  cursor: pointer;
 }
 
 .button-container button:hover {
-    background-color: #004d40;
-}
-
-/* Giao diện trên màn hình nhỏ */
-@media (max-width: 768px) {
-    .container {
-        flex-direction: column;
-        align-items: center;
-        height: auto;
-    }
-
-    .test-selection,
-    .question-section {
-        width: 100%;
-        margin-bottom: 20px;
-    }
-
-    .button-container button {
-        width: 45%;
-    }
+  background: #0056b3;
+}
+
+.button-container button:disabled {
+  background: #ddd;
+  cursor: not-allowed;
 }
diff --git a/src/components/test.jsx b/src/components/test.jsx
index 8582a85..b801d5c 100644
--- a/src/components/test.jsx
+++ b/src/components/test.jsx
@@ -1,12 +1,14 @@
 import React, { useState, useEffect } from "react";
-import './test.css';
+import { useParams } from "react-router-dom";
+import "./test.css";
+import TopBar from "./Topbar";
 
-const MultipleChoiceLayout = () => {
-  const [questions, setQuestions] = useState([]); // Danh sách câu hỏi
-  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Câu hỏi hiện tại
-  const [answers, setAnswers] = useState({}); // Đáp án người dùng đã chọn
+const MultipleChoiceLayout = ({ toggleSidebar, toggleHistory, onLogout }) => {
+  const { testId } = useParams(); // Get test number from the route
+  const [questions, setQuestions] = useState([]);
+  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
+  const [answers, setAnswers] = useState({});
 
-  // Hàm giả lập lấy dữ liệu từ API
   useEffect(() => {
     const fetchQuestions = async () => {
       const mockData = Array.from({ length: 15 }, (_, i) => ({
@@ -20,7 +22,6 @@ const MultipleChoiceLayout = () => {
     fetchQuestions();
   }, []);
 
-  // Hàm xử lý chọn đáp án
   const handleAnswerChange = (questionId, selectedOption) => {
     setAnswers((prev) => ({
       ...prev,
@@ -28,7 +29,6 @@ const MultipleChoiceLayout = () => {
     }));
   };
 
-  // Hàm chuyển sang câu hỏi trước hoặc sau
   const handleNavigation = (direction) => {
     setCurrentQuestionIndex((prev) =>
       direction === "next"
@@ -37,7 +37,6 @@ const MultipleChoiceLayout = () => {
     );
   };
 
-  // Hàm gửi câu trả lời
   const handleSubmit = () => {
     console.log("Submitted Answers:", answers);
     alert("Your answers have been submitted!");
@@ -45,15 +44,17 @@ const MultipleChoiceLayout = () => {
 
   return (
     <>
-      <meta charSet="UTF-8" />
-      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-      <title>Multiple Choice Layout</title>
-      <link rel="stylesheet" href="test.css" />
-      <div className="container">
-        {/* Test selection section */}
-        <div className="test-selection">
-          <h3>Test Number 1:</h3>
-          {Array.from({ length: 15 }, (_, i) => (
+    <TopBar
+        toggleSidebar={toggleSidebar}
+        toggleHistory={toggleHistory}
+        onLogout={onLogout}
+      />
+    <div className="test-container">
+      {/* Sidebar for question navigation */}
+      <div className="test-sidebar">
+        <h4>Quiz Navigation</h4>
+        <div className="navigation-buttons">
+          {Array.from({ length: questions.length }, (_, i) => (
             <button
               key={i}
               onClick={() => setCurrentQuestionIndex(i)}
@@ -62,22 +63,23 @@ const MultipleChoiceLayout = () => {
               {i + 1}
             </button>
           ))}
-          <br />
-          <button className="finish" onClick={handleSubmit}>
-            Finished? Then Submit
-          </button>
         </div>
+        <button className="finish" onClick={handleSubmit}>
+          Finish Attempt
+        </button>
+      </div>
 
-        {/* Question section */}
-        <div className="question-section">
-          {questions.length > 0 && (
-            <>
-              <label>
-                <h2>{questions[currentQuestionIndex].text}</h2>
-              </label>
+      {/* Main question section */}
+      <div className="question-section">
+        <h4>Test Number: {testId}</h4>
+        {questions.length > 0 && (
+          <>
+            <h2>{questions[currentQuestionIndex].text}</h2>
+            <div className="options">
               {questions[currentQuestionIndex].options.map((option, idx) => (
-                <label key={idx}>
+                <label key={idx} className="option-label">
                   <input
+                  
                     type="radio"
                     name={`question${questions[currentQuestionIndex].id}`}
                     value={option}
@@ -94,16 +96,25 @@ const MultipleChoiceLayout = () => {
                   {option}
                 </label>
               ))}
-              <div className="button-container">
-                <button onClick={() => handleNavigation("prev")}>
-                  Previous
-                </button>
-                <button onClick={() => handleNavigation("next")}>Next</button>
-              </div>
-            </>
-          )}
-        </div>
+            </div>
+            <div className="button-container">
+              <button
+                onClick={() => handleNavigation("prev")}
+                disabled={currentQuestionIndex === 0}
+              >
+                Previous
+              </button>
+              <button
+                onClick={() => handleNavigation("next")}
+                disabled={currentQuestionIndex === questions.length - 1}
+              >
+                Next
+              </button>
+            </div>
+          </>
+        )}
       </div>
+    </div>
     </>
   );
 };
